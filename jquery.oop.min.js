/*--------------------------------------------*
 * Useful extensions when
 * you are creating your own
 * javascript objects/classes
 *--------------------------------------------*
 * Orgins from:
 * Simple JavaScript Inheritance and makeClass
 * by John Resig http://ejohn.org/
 *--------------------------------------------*
 * Integrated with jQuery and added
 * functionality by Emil Kilhage
 *--------------------------------------------*
 * Last Update: 2010-11-10 00:59:52
 *--------------------------------------------*/
(function($){var initializing=false,_fnSearchFn=function(){xyz},fnSearch=/xyz/.test(_fnSearchFn)?/\b_parent\b/ :/.*/,B,C=$.Class=function(prop){return C.create(prop)};$.extend(C,{makeClass:function(){return function(args){if(this instanceof arguments.callee){if(!initializing&&typeof this.init==="function"){this.init.apply(this,(typeof args==="object"&&args.callee)?args:arguments)}}else{return new arguments.callee(arguments)}}},create:function(prop){return B.extend(prop)},addMethods:function(src,prop,classToModify){classToModify=classToModify||src;initializing=true;var _parent=src.prototype,prototype=new src();initializing=false;for(var name in prop){prototype[name]=typeof _parent[name]==="function"&&typeof prop[name]==="function"&&fnSearch.test(prop[name])?(function(name,fn){return function(){var tmp=this._parent;this._parent=_parent[name];var ret=fn.apply(this,arguments);this._parent=tmp;return ret}})(name,prop[name]):prop[name]}classToModify.prototype=prototype;return classToModify}});B=$.extend(C.makeClass(),{extend:function(prop){var Class=C.makeClass(),n;for(n in this){if(typeof this[n]==="function"){Class[n]=this[n]}}Class.constructor=Class;C.addMethods(this,prop,Class);return Class},addMethods:function(prop){return C.addMethods(this,prop)}})}(jQuery));
