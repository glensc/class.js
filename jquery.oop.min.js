/*
 * Useful extensions when
 * you are creating your own
 * javascript objects/classes
 *
 * Orgins from:
 * Simple JavaScript Inheritance and makeClass
 * by John Resig http://ejohn.org/
 *
 * Integrated with jQuery and added functionality by Emil Kilhage
 */
(function($){var j=false,_fnSearchFn=function(){xyz},fnSearch=/xyz/.test(_fnSearchFn),_fnSearchs={};$.extend({Class:function(a){return C.create(a)},fnSearch:function(a,b){return(fnSearch?_fnSearchs[a]?_fnSearchs[a]:_fnSearchs[a]=new RegExp("\\b"+a+"\\b"):/.*/).test(b)}});var C=$.Class;$.extend(C,{makeClass:function(){var b=function(a){if(this instanceof arguments.callee){if(!j&&typeof this.init==="function"){this.init.apply(this,(typeof a==="object"&&a.callee)?a:arguments)}}else{return new arguments.callee(arguments)}};b.constructor=b;return b},create:function(a){return k.extend(a)},addMethods:function(e,f,g){g=g||e;j=true;var h=e.prototype,prototype=new e();j=false;for(var i in f){prototype[i]=typeof h[i]==="function"&&typeof f[i]==="function"&&$.fnSearch("_parent",f[i])?(function(c,d){return function(){var a=this._parent;this._parent=h[c];var b=d.apply(this,arguments);this._parent=a;return b}})(i,f[i]):f[i]}g.prototype=prototype;return g}});var k=C.makeClass();k.extend=function(b){var c=C.makeClass();C.addMethods(this,b,c);c.extend=arguments.callee;c.addMethods=function(a){return C.addMethods(this,a)};return c}}(jQuery));
